/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var cool_grammar = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"file":3,"program":4,"EOF":5,"class":6,"SEMI":7,"CLASS":8,"type":9,"INHERITS":10,"LBRACE":11,"feature_s":12,"RBRACE":13,"feature_p":14,"feature":15,"identifier":16,"LPAREN":17,"formal_option":18,"RPAREN":19,"COLON":20,"expr":21,"larrow_option":22,"LARROW":23,"formal":24,"formal_s":25,"formal_p":26,"COMMA":27,"AT":28,"DOT":29,"expr_option":30,"if":31,"THEN":32,"ELSE":33,"FI":34,"while":35,"LOOP":36,"POOL":37,"lbrace":38,"expr_p":39,"let":40,"id_type_expr_s":41,"IN":42,"case":43,"OF":44,"id_type_expr_p":45,"ESAC":46,"new":47,"isvoid":48,"PLUS":49,"MINUS":50,"TIMES":51,"DIVIDE":52,"tilde":53,"LT":54,"LE":55,"EQUALS":56,"not":57,"lparen":58,"integer":59,"string":60,"true":61,"false":62,"expr_s":63,"expr_s_p":64,"id_type_expr_s_p":65,"RARROW":66,"TYPE":67,"IDENTIFIER":68,"INTEGER":69,"IF":70,"WHILE":71,"LET":72,"CASE":73,"NEW":74,"ISVOID":75,"TILDE":76,"NOT":77,"STRING":78,"TRUE":79,"FALSE":80,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"SEMI",8:"CLASS",10:"INHERITS",11:"LBRACE",13:"RBRACE",17:"LPAREN",19:"RPAREN",20:"COLON",23:"LARROW",27:"COMMA",28:"AT",29:"DOT",32:"THEN",33:"ELSE",34:"FI",36:"LOOP",37:"POOL",42:"IN",44:"OF",46:"ESAC",49:"PLUS",50:"MINUS",51:"TIMES",52:"DIVIDE",54:"LT",55:"LE",56:"EQUALS",66:"RARROW",67:"TYPE",68:"IDENTIFIER",69:"INTEGER",70:"IF",71:"WHILE",72:"LET",73:"CASE",74:"NEW",75:"ISVOID",76:"TILDE",77:"NOT",78:"STRING",79:"TRUE",80:"FALSE"},
productions_: [0,[3,2],[4,2],[4,3],[6,7],[6,5],[12,0],[12,1],[14,2],[14,3],[15,9],[15,4],[22,0],[22,2],[18,0],[18,2],[24,3],[25,0],[25,1],[26,2],[26,3],[21,3],[21,8],[21,6],[21,4],[21,7],[21,5],[21,3],[21,8],[21,5],[21,2],[21,2],[21,3],[21,3],[21,3],[21,3],[21,2],[21,3],[21,3],[21,3],[21,2],[21,3],[21,1],[21,1],[21,1],[21,1],[21,1],[30,0],[30,2],[63,0],[63,1],[64,2],[64,3],[39,2],[39,3],[41,0],[41,1],[65,5],[65,6],[45,6],[45,7],[9,1],[16,1],[59,1],[31,1],[35,1],[38,1],[40,1],[43,1],[47,1],[48,1],[53,1],[57,1],[58,1],[60,1],[61,1],[62,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:return $$[$0-1];
break;
case 2:this.$ = [$$[$0-1]];
break;
case 3:this.$ = $$[$0]; this.$.unshift($$[$0-2]);
break;
case 4: var feats = $$[$0-1];
	  	     	      	   	  	    	     if (feats == null) {
							     	feats = [];
							     }
							     this.$ = { name: $$[$0-5],
								    superclass: $$[$0-3],
								    features: feats		   
								    }; 
break;
case 5: var feats = $$[$0-1];
	  	     	    	      	       if (feats == null) {
					       	  feats = [];
					       }
					       this.$ = { name: $$[$0-3],
	  	     	    	      	       	      superclass: null,
	  	     	    	      	       	      features: feats
						    };
break;
case 6: this.$ = null;
break;
case 7: this.$ = $$[$0]; 
break;
case 8: this.$ = [$$[$0-1]];
break;
case 9: this.$ = $$[$0];
	  	       		   this.$.unshift($$[$0-2]);
break;
case 10:    var formallist = $$[$0-6];
	  	     	    		  	       	    	   	       	    if($$[$0-6] == null) {
										    	  formallist = [];
	  	     	    		  	       	    	   	       	    }
	  	     	    		  	       	    	   	       	    this.$ = {
	  	     	    	   	    	   	      	     	  	      	  name: $$[$0-8],
											  kind: "method",
											  type: $$[$0-3],
											  formals: formallist,
											  body: $$[$0-1]
	  	     	    	   	    	   	      	     	  	     };
										 
break;
case 11: if($$[$0] != null) {
	  	     	   		      	      this.$ = { name: $$[$0-3],
	  	     	   		      	       	 kind: "attribute_init",
	  	     	   		      	       	 type: $$[$0-1],
						       	 init: $$[$0]
	  	     	   		      	       };
						} else {
						  	this.$ = { name: $$[$0-3],
	  	     	   		      	       kind: "attribute_no_init",
	  	     	   		      	       type: $$[$0-1]
	  	     	   		      	       };
						}
break;
case 12: this.$ = null;
break;
case 13: this.$ = $$[$0];
break;
case 14: this.$ = null;
break;
case 15: if ($$[$0] != null) {
	  	 	       this.$ = $$[$0];
			       this.$.unshift($$[$0-1]);
	  	 	    } else {
			       this.$ = [$$[$0-1]];
			    }
break;
case 16: this.$ = {name: $$[$0-2],
	  	     	   	       	type: $$[$0]
				       };
break;
case 17:this.$ = null;
break;
case 18: this.$ = $$[$0];
break;
case 19: this.$ = [$$[$0]];
break;
case 20: this.$ = $$[$0]; this.$.unshift($$[$0-1]);
break;
case 21: this.$ = {name: "assign", lineno: $$[$0-2]['lineno'], var: $$[$0-2], rhs: $$[$0]};
break;
case 22: var arguments = $$[$0-1];
	       	       	   	      	     		 	  if (arguments == null) {
								      arguments = [];
								  }
	       	       	   	      	     		 	  this.$ = {name: "static_dispatch", lineno: $$[$0-7]['lineno'], type: $$[$0-5], e: $$[$0-7], method: $$[$0-3], args: arguments};
break;
case 23:  var arguments = $$[$0-1];
	  	     	    		       	 if(arguments == null) {
						     arguments = [];
						 }
						 this.$ = {name: "dynamic_dispatch", lineno: $$[$0-5]['lineno'], e: $$[$0-5], method: $$[$0-3], args: arguments};
break;
case 24: var arguments = $$[$0-1];
	  	     	    		       	 if(arguments == null) {
						     arguments = [];
						 }
						 this.$ = {name: "self_dispatch", lineno: $$[$0-3]['lineno'], method: $$[$0-3], args: arguments};
break;
case 25: this.$ = {name: "if", lineno: $$[$0-6], predicate: $$[$0-5], then: $$[$0-3], else: $$[$0-1]}; 
break;
case 26: this.$ = {name: "while", lineno: $$[$0-4], predicate: $$[$0-3], body: $$[$0-1]};
break;
case 27: this.$ = {name: "block", lineno: $$[$0-2], body: $$[$0-1]}; 
break;
case 28: var binding = $$[$0-2]; 
	      		       	    		  		    	       if (binding == null) {
									       	  binding = [];
									       }
	      		       	    		  		    	       if($$[$0-3] == null) {
									       	     binding.unshift({
										      	name: "let_binding_no_init",
											variable: $$[$0-6],
											type: $$[$0-4]
										      });
										     this.$ = {
	      		       	    		  		    	       	      name: "let",
										      lineno: $$[$0-7],
										      expr: $$[$0],
										      bindings: binding };
										  } else {
										     binding.unshift({
										      	name: "let_binding_init",
											variable: $$[$0-6],
											type: $$[$0-4],
											value: $$[$0-3]
										      });
										    this.$ = {
										       name: "let",
										       lineno: $$[$0-7],
										       expr: $$[$0],
										       bindings: binding };
									          }
break;
case 29: this.$ = {
						  name: "case",
						  lineno: $$[$0-4],
						  case: $$[$0-3],
						  elements: $$[$0-1]
						  };
break;
case 30: this.$ = {name: "new", lineno: $$[$0-1], class: $$[$0]};
break;
case 31: this.$ = {name: "isvoid", lineno: $$[$0-1], e: $$[$0]};
break;
case 32: this.$ = {name: "plus", lineno: $$[$0-2]['lineno'], x: $$[$0-2], y: $$[$0]};
break;
case 33: this.$ = {name: "minus", lineno: $$[$0-2]['lineno'], x: $$[$0-2], y: $$[$0]};
break;
case 34: this.$ = {name: "times", lineno: $$[$0-2]['lineno'], x: $$[$0-2], y: $$[$0]};
break;
case 35: this.$ = {name: "divide", lineno: $$[$0-2]['lineno'], x: $$[$0-2], y:$$[$0]};
break;
case 36: this.$ = {name: "negate", lineno: $$[$0-1], x: $$[$0]};
break;
case 37: this.$ = {name: "lt", lineno: $$[$0-2]['lineno'], x: $$[$0-2], y: $$[$0]};
break;
case 38: this.$ = {name: "le", lineno: $$[$0-2]['lineno'], x: $$[$0-2], y: $$[$0]};
break;
case 39: this.$ = {name: "eq", lineno: $$[$0-2]['lineno'], x: $$[$0-2], y: $$[$0]};
break;
case 40: this.$ = {name: "not", lineno: $$[$0-1], x: $$[$0]};
break;
case 41: this.$ = {name: "bracket", lineno: $$[$0-2], value: $$[$0-1]};
break;
case 42: this.$ = {name: "identifier", lineno: $$[$0]['lineno'], variable: $$[$0]};
break;
case 43: this.$ = {name: "integer", lineno: $$[$0]['lineno'], value: $$[$0]['name']};
break;
case 44: this.$ = {name: "string", lineno: $$[$0]['lineno'], value: $$[$0]['name']};
break;
case 45: this.$ = {name: "true", lineno: $$[$0]};
break;
case 46: this.$ = {name: "false", lineno: $$[$0]};
break;
case 47: this.$ = null;
break;
case 48: if($$[$0] != null) { 
	       	      	  this.$ = $$[$0];
			  this.$.unshift($$[$0-1]);
			} else {
			  this.$ = [$$[$0-1]];
			}
			
break;
case 49: this.$ = null;
break;
case 50: this.$ = $$[$0];
break;
case 51: this.$ = [$$[$0]];
break;
case 52: this.$ = $$[$0]; this.$.unshift($$[$0-1]);
break;
case 53: this.$ = [$$[$0-1]];
break;
case 54: this.$ = $$[$0]; this.$.unshift($$[$0-2]);
break;
case 55: this.$ = null;
break;
case 56:this.$ = $$[$0];
break;
case 57: 
	  		   	      		    		   if ($$[$0] != null) {
								      this.$ = [{
								      	 name: "let_binding_init",
									 variable: $$[$0-3],
									 type: $$[$0-1],
									 value: $$[$0]
								      }];
								   } else {
								     this.$ = [{
								      	 name: "let_binding_no_init",
									 variable: $$[$0-3],
									 type: $$[$0-1]
								      }];
								   }
								
break;
case 58: 
	  		   	      		    		   if ($$[$0-1] != null) {
								      this.$ = $$[$0];
								      this.$.unshift({
								      	 name: "let_binding_init",
									 variable: $$[$0-4],
									 type: $$[$0-2],
									 value: $$[$0-1]
								      });
								   } else {
								     this.$ = $$[$0];
								     this.$.unshift({
								      	 name: "let_binding_no_init",
									 variable: $$[$0-4],
									 type: $$[$0-2]
								      });
								   }
								
break;
case 59: this.$ = [{variable: $$[$0-5], type: $$[$0-3], body: $$[$0-1]}];
break;
case 60: this.$ = $$[$0]; this.$.unshift({variable: $$[$0-6], type: $$[$0-4], body: $$[$0-2]});
break;
case 61: this.$ = {lineno: yylineno, name: yytext};
break;
case 62: this.$ = {lineno: yylineno, name: yytext};
break;
case 63: this.$ = {lineno: yylineno, name: yytext};
break;
case 64: this.$ = yylineno;
break;
case 65: this.$ = yylineno;
break;
case 66: this.$ = yylineno;
break;
case 67: this.$ = yylineno;
break;
case 68: this.$ = yylineno;
break;
case 69: this.$ = yylineno;
break;
case 70: this.$ = yylineno;
break;
case 71: this.$ = yylineno;
break;
case 72: this.$ = yylineno;
break;
case 73: this.$ = yylineno;
break;
case 74: this.$ = {lineno: yylineno, name: yytext};
break;
case 75: this.$ = yylineno;
break;
case 76: this.$ = yylineno;
break;
}
},
table: [{3:1,4:2,6:3,8:[1,4]},{1:[3]},{5:[1,5]},{7:[1,6]},{9:7,67:[1,8]},{1:[2,1]},{4:9,5:[2,2],6:3,8:[1,4]},{10:[1,10],11:[1,11]},{7:[2,61],10:[2,61],11:[2,61],13:[2,61],19:[2,61],23:[2,61],27:[2,61],28:[2,61],29:[2,61],32:[2,61],33:[2,61],34:[2,61],36:[2,61],37:[2,61],42:[2,61],44:[2,61],49:[2,61],50:[2,61],51:[2,61],52:[2,61],54:[2,61],55:[2,61],56:[2,61],66:[2,61]},{5:[2,3]},{9:12,67:[1,8]},{12:13,13:[2,6],14:14,15:15,16:16,68:[1,17]},{11:[1,18]},{13:[1,19]},{13:[2,7]},{7:[1,20]},{17:[1,21],20:[1,22]},{7:[2,62],13:[2,62],17:[2,62],19:[2,62],20:[2,62],23:[2,62],27:[2,62],28:[2,62],29:[2,62],32:[2,62],33:[2,62],34:[2,62],36:[2,62],37:[2,62],42:[2,62],44:[2,62],49:[2,62],50:[2,62],51:[2,62],52:[2,62],54:[2,62],55:[2,62],56:[2,62]},{12:23,13:[2,6],14:14,15:15,16:16,68:[1,17]},{7:[2,5]},{13:[2,8],14:24,15:15,16:16,68:[1,17]},{16:27,18:25,19:[2,14],24:26,68:[1,17]},{9:28,67:[1,8]},{13:[1,29]},{13:[2,9]},{19:[1,30]},{19:[2,17],25:31,26:32,27:[1,33]},{20:[1,34]},{7:[2,12],22:35,23:[1,36]},{7:[2,4]},{20:[1,37]},{19:[2,15]},{19:[2,18]},{16:27,24:38,68:[1,17]},{9:39,67:[1,8]},{7:[2,11]},{11:[1,58],16:41,17:[1,65],21:40,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:[1,17],69:[1,66],70:[1,56],71:[1,57],72:[1,59],73:[1,60],74:[1,61],75:[1,62],76:[1,63],77:[1,64],78:[1,67],79:[1,68],80:[1,69]},{9:70,67:[1,8]},{19:[2,19],26:71,27:[1,33]},{19:[2,16],27:[2,16]},{7:[2,13],27:[2,13],28:[1,72],29:[1,73],42:[2,13],49:[1,74],50:[1,75],51:[1,76],52:[1,77],54:[1,78],55:[1,79],56:[1,80]},{7:[2,42],13:[2,42],17:[1,82],19:[2,42],23:[1,81],27:[2,42],28:[2,42],29:[2,42],32:[2,42],33:[2,42],34:[2,42],36:[2,42],37:[2,42],42:[2,42],44:[2,42],49:[2,42],50:[2,42],51:[2,42],52:[2,42],54:[2,42],55:[2,42],56:[2,42]},{11:[1,58],16:41,17:[1,65],21:83,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:[1,17],69:[1,66],70:[1,56],71:[1,57],72:[1,59],73:[1,60],74:[1,61],75:[1,62],76:[1,63],77:[1,64],78:[1,67],79:[1,68],80:[1,69]},{11:[1,58],16:41,17:[1,65],21:84,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:[1,17],69:[1,66],70:[1,56],71:[1,57],72:[1,59],73:[1,60],74:[1,61],75:[1,62],76:[1,63],77:[1,64],78:[1,67],79:[1,68],80:[1,69]},{11:[1,58],16:41,17:[1,65],21:86,31:42,35:43,38:44,39:85,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:[1,17],69:[1,66],70:[1,56],71:[1,57],72:[1,59],73:[1,60],74:[1,61],75:[1,62],76:[1,63],77:[1,64],78:[1,67],79:[1,68],80:[1,69]},{16:87,68:[1,17]},{11:[1,58],16:41,17:[1,65],21:88,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:[1,17],69:[1,66],70:[1,56],71:[1,57],72:[1,59],73:[1,60],74:[1,61],75:[1,62],76:[1,63],77:[1,64],78:[1,67],79:[1,68],80:[1,69]},{9:89,67:[1,8]},{11:[1,58],16:41,17:[1,65],21:90,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:[1,17],69:[1,66],70:[1,56],71:[1,57],72:[1,59],73:[1,60],74:[1,61],75:[1,62],76:[1,63],77:[1,64],78:[1,67],79:[1,68],80:[1,69]},{11:[1,58],16:41,17:[1,65],21:91,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:[1,17],69:[1,66],70:[1,56],71:[1,57],72:[1,59],73:[1,60],74:[1,61],75:[1,62],76:[1,63],77:[1,64],78:[1,67],79:[1,68],80:[1,69]},{11:[1,58],16:41,17:[1,65],21:92,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:[1,17],69:[1,66],70:[1,56],71:[1,57],72:[1,59],73:[1,60],74:[1,61],75:[1,62],76:[1,63],77:[1,64],78:[1,67],79:[1,68],80:[1,69]},{11:[1,58],16:41,17:[1,65],21:93,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:[1,17],69:[1,66],70:[1,56],71:[1,57],72:[1,59],73:[1,60],74:[1,61],75:[1,62],76:[1,63],77:[1,64],78:[1,67],79:[1,68],80:[1,69]},{7:[2,43],13:[2,43],19:[2,43],27:[2,43],28:[2,43],29:[2,43],32:[2,43],33:[2,43],34:[2,43],36:[2,43],37:[2,43],42:[2,43],44:[2,43],49:[2,43],50:[2,43],51:[2,43],52:[2,43],54:[2,43],55:[2,43],56:[2,43]},{7:[2,44],13:[2,44],19:[2,44],27:[2,44],28:[2,44],29:[2,44],32:[2,44],33:[2,44],34:[2,44],36:[2,44],37:[2,44],42:[2,44],44:[2,44],49:[2,44],50:[2,44],51:[2,44],52:[2,44],54:[2,44],55:[2,44],56:[2,44]},{7:[2,45],13:[2,45],19:[2,45],27:[2,45],28:[2,45],29:[2,45],32:[2,45],33:[2,45],34:[2,45],36:[2,45],37:[2,45],42:[2,45],44:[2,45],49:[2,45],50:[2,45],51:[2,45],52:[2,45],54:[2,45],55:[2,45],56:[2,45]},{7:[2,46],13:[2,46],19:[2,46],27:[2,46],28:[2,46],29:[2,46],32:[2,46],33:[2,46],34:[2,46],36:[2,46],37:[2,46],42:[2,46],44:[2,46],49:[2,46],50:[2,46],51:[2,46],52:[2,46],54:[2,46],55:[2,46],56:[2,46]},{11:[2,64],17:[2,64],68:[2,64],69:[2,64],70:[2,64],71:[2,64],72:[2,64],73:[2,64],74:[2,64],75:[2,64],76:[2,64],77:[2,64],78:[2,64],79:[2,64],80:[2,64]},{11:[2,65],17:[2,65],68:[2,65],69:[2,65],70:[2,65],71:[2,65],72:[2,65],73:[2,65],74:[2,65],75:[2,65],76:[2,65],77:[2,65],78:[2,65],79:[2,65],80:[2,65]},{11:[2,66],17:[2,66],68:[2,66],69:[2,66],70:[2,66],71:[2,66],72:[2,66],73:[2,66],74:[2,66],75:[2,66],76:[2,66],77:[2,66],78:[2,66],79:[2,66],80:[2,66]},{68:[2,67]},{11:[2,68],17:[2,68],68:[2,68],69:[2,68],70:[2,68],71:[2,68],72:[2,68],73:[2,68],74:[2,68],75:[2,68],76:[2,68],77:[2,68],78:[2,68],79:[2,68],80:[2,68]},{67:[2,69]},{11:[2,70],17:[2,70],68:[2,70],69:[2,70],70:[2,70],71:[2,70],72:[2,70],73:[2,70],74:[2,70],75:[2,70],76:[2,70],77:[2,70],78:[2,70],79:[2,70],80:[2,70]},{11:[2,71],17:[2,71],68:[2,71],69:[2,71],70:[2,71],71:[2,71],72:[2,71],73:[2,71],74:[2,71],75:[2,71],76:[2,71],77:[2,71],78:[2,71],79:[2,71],80:[2,71]},{11:[2,72],17:[2,72],68:[2,72],69:[2,72],70:[2,72],71:[2,72],72:[2,72],73:[2,72],74:[2,72],75:[2,72],76:[2,72],77:[2,72],78:[2,72],79:[2,72],80:[2,72]},{11:[2,73],17:[2,73],68:[2,73],69:[2,73],70:[2,73],71:[2,73],72:[2,73],73:[2,73],74:[2,73],75:[2,73],76:[2,73],77:[2,73],78:[2,73],79:[2,73],80:[2,73]},{7:[2,63],13:[2,63],19:[2,63],27:[2,63],28:[2,63],29:[2,63],32:[2,63],33:[2,63],34:[2,63],36:[2,63],37:[2,63],42:[2,63],44:[2,63],49:[2,63],50:[2,63],51:[2,63],52:[2,63],54:[2,63],55:[2,63],56:[2,63]},{7:[2,74],13:[2,74],19:[2,74],27:[2,74],28:[2,74],29:[2,74],32:[2,74],33:[2,74],34:[2,74],36:[2,74],37:[2,74],42:[2,74],44:[2,74],49:[2,74],50:[2,74],51:[2,74],52:[2,74],54:[2,74],55:[2,74],56:[2,74]},{7:[2,75],13:[2,75],19:[2,75],27:[2,75],28:[2,75],29:[2,75],32:[2,75],33:[2,75],34:[2,75],36:[2,75],37:[2,75],42:[2,75],44:[2,75],49:[2,75],50:[2,75],51:[2,75],52:[2,75],54:[2,75],55:[2,75],56:[2,75]},{7:[2,76],13:[2,76],19:[2,76],27:[2,76],28:[2,76],29:[2,76],32:[2,76],33:[2,76],34:[2,76],36:[2,76],37:[2,76],42:[2,76],44:[2,76],49:[2,76],50:[2,76],51:[2,76],52:[2,76],54:[2,76],55:[2,76],56:[2,76]},{11:[1,94]},{19:[2,20]},{9:95,67:[1,8]},{16:96,68:[1,17]},{11:[1,58],16:41,17:[1,65],21:97,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:[1,17],69:[1,66],70:[1,56],71:[1,57],72:[1,59],73:[1,60],74:[1,61],75:[1,62],76:[1,63],77:[1,64],78:[1,67],79:[1,68],80:[1,69]},{11:[1,58],16:41,17:[1,65],21:98,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:[1,17],69:[1,66],70:[1,56],71:[1,57],72:[1,59],73:[1,60],74:[1,61],75:[1,62],76:[1,63],77:[1,64],78:[1,67],79:[1,68],80:[1,69]},{11:[1,58],16:41,17:[1,65],21:99,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:[1,17],69:[1,66],70:[1,56],71:[1,57],72:[1,59],73:[1,60],74:[1,61],75:[1,62],76:[1,63],77:[1,64],78:[1,67],79:[1,68],80:[1,69]},{11:[1,58],16:41,17:[1,65],21:100,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:[1,17],69:[1,66],70:[1,56],71:[1,57],72:[1,59],73:[1,60],74:[1,61],75:[1,62],76:[1,63],77:[1,64],78:[1,67],79:[1,68],80:[1,69]},{11:[1,58],16:41,17:[1,65],21:101,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:[1,17],69:[1,66],70:[1,56],71:[1,57],72:[1,59],73:[1,60],74:[1,61],75:[1,62],76:[1,63],77:[1,64],78:[1,67],79:[1,68],80:[1,69]},{11:[1,58],16:41,17:[1,65],21:102,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:[1,17],69:[1,66],70:[1,56],71:[1,57],72:[1,59],73:[1,60],74:[1,61],75:[1,62],76:[1,63],77:[1,64],78:[1,67],79:[1,68],80:[1,69]},{11:[1,58],16:41,17:[1,65],21:103,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:[1,17],69:[1,66],70:[1,56],71:[1,57],72:[1,59],73:[1,60],74:[1,61],75:[1,62],76:[1,63],77:[1,64],78:[1,67],79:[1,68],80:[1,69]},{11:[1,58],16:41,17:[1,65],21:104,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:[1,17],69:[1,66],70:[1,56],71:[1,57],72:[1,59],73:[1,60],74:[1,61],75:[1,62],76:[1,63],77:[1,64],78:[1,67],79:[1,68],80:[1,69]},{11:[1,58],16:41,17:[1,65],19:[2,47],21:106,30:105,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:[1,17],69:[1,66],70:[1,56],71:[1,57],72:[1,59],73:[1,60],74:[1,61],75:[1,62],76:[1,63],77:[1,64],78:[1,67],79:[1,68],80:[1,69]},{28:[1,72],29:[1,73],32:[1,107],49:[1,74],50:[1,75],51:[1,76],52:[1,77],54:[1,78],55:[1,79],56:[1,80]},{28:[1,72],29:[1,73],36:[1,108],49:[1,74],50:[1,75],51:[1,76],52:[1,77],54:[1,78],55:[1,79],56:[1,80]},{13:[1,109]},{7:[1,110],28:[1,72],29:[1,73],49:[1,74],50:[1,75],51:[1,76],52:[1,77],54:[1,78],55:[1,79],56:[1,80]},{20:[1,111]},{28:[1,72],29:[1,73],44:[1,112],49:[1,74],50:[1,75],51:[1,76],52:[1,77],54:[1,78],55:[1,79],56:[1,80]},{7:[2,30],13:[2,30],19:[2,30],27:[2,30],28:[2,30],29:[2,30],32:[2,30],33:[2,30],34:[2,30],36:[2,30],37:[2,30],42:[2,30],44:[2,30],49:[2,30],50:[2,30],51:[2,30],52:[2,30],54:[2,30],55:[2,30],56:[2,30]},{7:[2,31],13:[2,31],19:[2,31],27:[2,31],28:[1,72],29:[1,73],32:[2,31],33:[2,31],34:[2,31],36:[2,31],37:[2,31],42:[2,31],44:[2,31],49:[2,31],50:[2,31],51:[2,31],52:[2,31],54:[2,31],55:[2,31],56:[2,31]},{7:[2,36],13:[2,36],19:[2,36],27:[2,36],28:[1,72],29:[1,73],32:[2,36],33:[2,36],34:[2,36],36:[2,36],37:[2,36],42:[2,36],44:[2,36],49:[2,36],50:[2,36],51:[2,36],52:[2,36],54:[2,36],55:[2,36],56:[2,36]},{7:[2,40],13:[2,40],19:[2,40],27:[2,40],28:[1,72],29:[1,73],32:[2,40],33:[2,40],34:[2,40],36:[2,40],37:[2,40],42:[2,40],44:[2,40],49:[1,74],50:[1,75],51:[1,76],52:[1,77],54:[1,78],55:[1,79],56:[1,80]},{19:[1,113],28:[1,72],29:[1,73],49:[1,74],50:[1,75],51:[1,76],52:[1,77],54:[1,78],55:[1,79],56:[1,80]},{11:[1,58],16:41,17:[1,65],21:114,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:[1,17],69:[1,66],70:[1,56],71:[1,57],72:[1,59],73:[1,60],74:[1,61],75:[1,62],76:[1,63],77:[1,64],78:[1,67],79:[1,68],80:[1,69]},{29:[1,115]},{17:[1,116]},{7:[2,32],13:[2,32],19:[2,32],27:[2,32],28:[1,72],29:[1,73],32:[2,32],33:[2,32],34:[2,32],36:[2,32],37:[2,32],42:[2,32],44:[2,32],49:[2,32],50:[2,32],51:[1,76],52:[1,77],54:[2,32],55:[2,32],56:[2,32]},{7:[2,33],13:[2,33],19:[2,33],27:[2,33],28:[1,72],29:[1,73],32:[2,33],33:[2,33],34:[2,33],36:[2,33],37:[2,33],42:[2,33],44:[2,33],49:[2,33],50:[2,33],51:[1,76],52:[1,77],54:[2,33],55:[2,33],56:[2,33]},{7:[2,34],13:[2,34],19:[2,34],27:[2,34],28:[1,72],29:[1,73],32:[2,34],33:[2,34],34:[2,34],36:[2,34],37:[2,34],42:[2,34],44:[2,34],49:[2,34],50:[2,34],51:[2,34],52:[2,34],54:[2,34],55:[2,34],56:[2,34]},{7:[2,35],13:[2,35],19:[2,35],27:[2,35],28:[1,72],29:[1,73],32:[2,35],33:[2,35],34:[2,35],36:[2,35],37:[2,35],42:[2,35],44:[2,35],49:[2,35],50:[2,35],51:[2,35],52:[2,35],54:[2,35],55:[2,35],56:[2,35]},{7:[2,37],13:[2,37],19:[2,37],27:[2,37],28:[1,72],29:[1,73],32:[2,37],33:[2,37],34:[2,37],36:[2,37],37:[2,37],42:[2,37],44:[2,37],49:[1,74],50:[1,75],51:[1,76],52:[1,77]},{7:[2,38],13:[2,38],19:[2,38],27:[2,38],28:[1,72],29:[1,73],32:[2,38],33:[2,38],34:[2,38],36:[2,38],37:[2,38],42:[2,38],44:[2,38],49:[1,74],50:[1,75],51:[1,76],52:[1,77]},{7:[2,39],13:[2,39],19:[2,39],27:[2,39],28:[1,72],29:[1,73],32:[2,39],33:[2,39],34:[2,39],36:[2,39],37:[2,39],42:[2,39],44:[2,39],49:[1,74],50:[1,75],51:[1,76],52:[1,77]},{7:[2,21],13:[2,21],19:[2,21],27:[2,21],28:[1,72],29:[1,73],32:[2,21],33:[2,21],34:[2,21],36:[2,21],37:[2,21],42:[2,21],44:[2,21],49:[1,74],50:[1,75],51:[1,76],52:[1,77],54:[1,78],55:[1,79],56:[1,80]},{19:[1,117]},{19:[2,49],27:[1,120],28:[1,72],29:[1,73],49:[1,74],50:[1,75],51:[1,76],52:[1,77],54:[1,78],55:[1,79],56:[1,80],63:118,64:119},{11:[1,58],16:41,17:[1,65],21:121,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:[1,17],69:[1,66],70:[1,56],71:[1,57],72:[1,59],73:[1,60],74:[1,61],75:[1,62],76:[1,63],77:[1,64],78:[1,67],79:[1,68],80:[1,69]},{11:[1,58],16:41,17:[1,65],21:122,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:[1,17],69:[1,66],70:[1,56],71:[1,57],72:[1,59],73:[1,60],74:[1,61],75:[1,62],76:[1,63],77:[1,64],78:[1,67],79:[1,68],80:[1,69]},{7:[2,27],13:[2,27],19:[2,27],27:[2,27],28:[2,27],29:[2,27],32:[2,27],33:[2,27],34:[2,27],36:[2,27],37:[2,27],42:[2,27],44:[2,27],49:[2,27],50:[2,27],51:[2,27],52:[2,27],54:[2,27],55:[2,27],56:[2,27]},{11:[1,58],13:[2,53],16:41,17:[1,65],21:86,31:42,35:43,38:44,39:123,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:[1,17],69:[1,66],70:[1,56],71:[1,57],72:[1,59],73:[1,60],74:[1,61],75:[1,62],76:[1,63],77:[1,64],78:[1,67],79:[1,68],80:[1,69]},{9:124,67:[1,8]},{16:126,45:125,68:[1,17]},{7:[2,41],13:[2,41],19:[2,41],27:[2,41],28:[2,41],29:[2,41],32:[2,41],33:[2,41],34:[2,41],36:[2,41],37:[2,41],42:[2,41],44:[2,41],49:[2,41],50:[2,41],51:[2,41],52:[2,41],54:[2,41],55:[2,41],56:[2,41]},{13:[1,127],28:[1,72],29:[1,73],49:[1,74],50:[1,75],51:[1,76],52:[1,77],54:[1,78],55:[1,79],56:[1,80]},{16:128,68:[1,17]},{11:[1,58],16:41,17:[1,65],19:[2,47],21:106,30:129,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:[1,17],69:[1,66],70:[1,56],71:[1,57],72:[1,59],73:[1,60],74:[1,61],75:[1,62],76:[1,63],77:[1,64],78:[1,67],79:[1,68],80:[1,69]},{7:[2,24],13:[2,24],19:[2,24],27:[2,24],28:[2,24],29:[2,24],32:[2,24],33:[2,24],34:[2,24],36:[2,24],37:[2,24],42:[2,24],44:[2,24],49:[2,24],50:[2,24],51:[2,24],52:[2,24],54:[2,24],55:[2,24],56:[2,24]},{19:[2,48]},{19:[2,50]},{11:[1,58],16:41,17:[1,65],21:130,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:[1,17],69:[1,66],70:[1,56],71:[1,57],72:[1,59],73:[1,60],74:[1,61],75:[1,62],76:[1,63],77:[1,64],78:[1,67],79:[1,68],80:[1,69]},{28:[1,72],29:[1,73],33:[1,131],49:[1,74],50:[1,75],51:[1,76],52:[1,77],54:[1,78],55:[1,79],56:[1,80]},{28:[1,72],29:[1,73],37:[1,132],49:[1,74],50:[1,75],51:[1,76],52:[1,77],54:[1,78],55:[1,79],56:[1,80]},{13:[2,54]},{22:133,23:[1,36],27:[2,12],42:[2,12]},{46:[1,134]},{20:[1,135]},{7:[2,10]},{17:[1,136]},{19:[1,137]},{19:[2,51],27:[1,120],28:[1,72],29:[1,73],49:[1,74],50:[1,75],51:[1,76],52:[1,77],54:[1,78],55:[1,79],56:[1,80],64:138},{11:[1,58],16:41,17:[1,65],21:139,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:[1,17],69:[1,66],70:[1,56],71:[1,57],72:[1,59],73:[1,60],74:[1,61],75:[1,62],76:[1,63],77:[1,64],78:[1,67],79:[1,68],80:[1,69]},{7:[2,26],13:[2,26],19:[2,26],27:[2,26],28:[2,26],29:[2,26],32:[2,26],33:[2,26],34:[2,26],36:[2,26],37:[2,26],42:[2,26],44:[2,26],49:[2,26],50:[2,26],51:[2,26],52:[2,26],54:[2,26],55:[2,26],56:[2,26]},{27:[1,142],41:140,42:[2,55],65:141},{7:[2,29],13:[2,29],19:[2,29],27:[2,29],28:[2,29],29:[2,29],32:[2,29],33:[2,29],34:[2,29],36:[2,29],37:[2,29],42:[2,29],44:[2,29],49:[2,29],50:[2,29],51:[2,29],52:[2,29],54:[2,29],55:[2,29],56:[2,29]},{9:143,67:[1,8]},{11:[1,58],16:41,17:[1,65],19:[2,47],21:106,30:144,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:[1,17],69:[1,66],70:[1,56],71:[1,57],72:[1,59],73:[1,60],74:[1,61],75:[1,62],76:[1,63],77:[1,64],78:[1,67],79:[1,68],80:[1,69]},{7:[2,23],13:[2,23],19:[2,23],27:[2,23],28:[2,23],29:[2,23],32:[2,23],33:[2,23],34:[2,23],36:[2,23],37:[2,23],42:[2,23],44:[2,23],49:[2,23],50:[2,23],51:[2,23],52:[2,23],54:[2,23],55:[2,23],56:[2,23]},{19:[2,52]},{28:[1,72],29:[1,73],34:[1,145],49:[1,74],50:[1,75],51:[1,76],52:[1,77],54:[1,78],55:[1,79],56:[1,80]},{42:[1,146]},{42:[2,56]},{16:147,68:[1,17]},{66:[1,148]},{19:[1,149]},{7:[2,25],13:[2,25],19:[2,25],27:[2,25],28:[2,25],29:[2,25],32:[2,25],33:[2,25],34:[2,25],36:[2,25],37:[2,25],42:[2,25],44:[2,25],49:[2,25],50:[2,25],51:[2,25],52:[2,25],54:[2,25],55:[2,25],56:[2,25]},{11:[1,58],16:41,17:[1,65],21:150,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:[1,17],69:[1,66],70:[1,56],71:[1,57],72:[1,59],73:[1,60],74:[1,61],75:[1,62],76:[1,63],77:[1,64],78:[1,67],79:[1,68],80:[1,69]},{20:[1,151]},{11:[1,58],16:41,17:[1,65],21:152,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:[1,17],69:[1,66],70:[1,56],71:[1,57],72:[1,59],73:[1,60],74:[1,61],75:[1,62],76:[1,63],77:[1,64],78:[1,67],79:[1,68],80:[1,69]},{7:[2,22],13:[2,22],19:[2,22],27:[2,22],28:[2,22],29:[2,22],32:[2,22],33:[2,22],34:[2,22],36:[2,22],37:[2,22],42:[2,22],44:[2,22],49:[2,22],50:[2,22],51:[2,22],52:[2,22],54:[2,22],55:[2,22],56:[2,22]},{7:[2,28],13:[2,28],19:[2,28],27:[2,28],28:[1,72],29:[1,73],32:[2,28],33:[2,28],34:[2,28],36:[2,28],37:[2,28],42:[2,28],44:[2,28],49:[1,74],50:[1,75],51:[1,76],52:[1,77],54:[1,78],55:[1,79],56:[1,80]},{9:153,67:[1,8]},{7:[1,154],28:[1,72],29:[1,73],49:[1,74],50:[1,75],51:[1,76],52:[1,77],54:[1,78],55:[1,79],56:[1,80]},{22:155,23:[1,36],27:[2,12],42:[2,12]},{16:126,45:156,46:[2,59],68:[1,17]},{27:[1,142],42:[2,57],65:157},{46:[2,60]},{42:[2,58]}],
defaultActions: {5:[2,1],9:[2,3],14:[2,7],19:[2,5],24:[2,9],29:[2,4],31:[2,15],32:[2,18],35:[2,11],59:[2,67],61:[2,69],71:[2,20],118:[2,48],119:[2,50],123:[2,54],127:[2,10],138:[2,52],141:[2,56],156:[2,60],157:[2,58]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
       	console.log("ERROR: " + hash.line + ": Parser: syntax error near " + hash.token);
	process.exit(1);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = cool_grammar;
exports.Parser = cool_grammar.Parser;
exports.parse = function () { return cool_grammar.parse.apply(cool_grammar, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}

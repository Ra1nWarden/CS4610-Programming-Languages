I started out with Python and Ruby. As some languages have built-in dictionaries (as these languages do), my initial approach to store the graph was to store all the nodes (in this case, the string for each line) as keys and the arrays of nodes that have edges pointing to the respective key node as values. For languages that do not have built-in dictionaries, I built a struct-like data structure to store both the destination string and the arrays of source strings. 
To start solving the problem, I loop through all the entries in the dictionary/struct to look for the least node (in this case the least string according to alphabetical order) with 0 in-degree. If there is no node with 0, then a cycle is detected. Suppose there is no cycle, the least node is then removed from the graph in the following way: the entry with the key equal to the least node is deleted and for the rest, that node is removed from the array if there exists a copy of it in the array. This process is then repeated until all nodes have been removed.
I found OCaml the hardest. It is a functional language and the idea that objects are immutable makes me think in a different way. My finial implementation in OCaml is not purely functional as I made use of OCaml's support for 'ref' and imperative programming. Personally, I find functional language interesting and would like to learn more aobut it.
